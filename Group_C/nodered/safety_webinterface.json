[
    {
        "id": "d85ab886bb3338cf",
        "type": "tab",
        "label": "Web Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "763d55c646760a59",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 120,
        "wires": [
            [
                "92a5d657508eeca5",
                "fe94df925cca471b"
            ]
        ]
    },
    {
        "id": "d63a9b13f021751d",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "92a5d657508eeca5",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 9",
        "func": "var floor=\"floor0\"\nvar room=\"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 100,
        "wires": [
            [
                "d63a9b13f021751d"
            ]
        ]
    },
    {
        "id": "3de3b30a3e1b8713",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "cfaecc4e067bdc80"
            ]
        ]
    },
    {
        "id": "79fafe62ef50094a",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 220,
        "wires": [
            [
                "3de3b30a3e1b8713"
            ]
        ]
    },
    {
        "id": "cfaecc4e067bdc80",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 14",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "84141e89b4345a3c"
            ]
        ]
    },
    {
        "id": "635b7a665cc0d9c4",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 280,
        "wires": [
            [
                "ce1c4b85a04b92fb"
            ]
        ]
    },
    {
        "id": "ce1c4b85a04b92fb",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "dd17f758067dead6",
                "52e99eddeb6893f0"
            ]
        ]
    },
    {
        "id": "dd17f758067dead6",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 21",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "a8a1314e3a791a13"
            ]
        ]
    },
    {
        "id": "2048dc6732675eb0",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 120,
        "wires": [
            [
                "763d55c646760a59"
            ]
        ]
    },
    {
        "id": "e8e4f125754d5f85",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 360,
        "wires": [
            [
                "849cd9f05a789e19"
            ]
        ]
    },
    {
        "id": "849cd9f05a789e19",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "448b8eb5e8e722c2",
                "b67a44f7038e47ae"
            ]
        ]
    },
    {
        "id": "448b8eb5e8e722c2",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 29",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "362a5cc2b421c745"
            ]
        ]
    },
    {
        "id": "362a5cc2b421c745",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "84141e89b4345a3c",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a8a1314e3a791a13",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9a8ef51abfbf141b",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 00",
        "info": "",
        "x": 60,
        "y": 60,
        "wires": []
    },
    {
        "id": "9eb71a5ee18899cb",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 01",
        "info": "",
        "x": 60,
        "y": 420,
        "wires": []
    },
    {
        "id": "fe94df925cca471b",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 148",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 140,
        "wires": [
            [
                "8cd3a6188845591b"
            ]
        ]
    },
    {
        "id": "8cd3a6188845591b",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2701b1ecd02534d5",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 140,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "b67a44f7038e47ae",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 149",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "a10d6e4b97fe8c4f"
            ]
        ]
    },
    {
        "id": "a10d6e4b97fe8c4f",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2701b1ecd02534d5",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 380,
        "wires": []
    },
    {
        "id": "c4b724ec755433fb",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 02",
        "info": "",
        "x": 80,
        "y": 800,
        "wires": []
    },
    {
        "id": "721df6c0caca1bc8",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2701b1ecd02534d5",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 300,
        "wires": []
    },
    {
        "id": "52e99eddeb6893f0",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 158",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "721df6c0caca1bc8"
            ]
        ]
    },
    {
        "id": "bef8b901eb06d69e",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "4315f20a9ab950ba",
                "c21313e3f26523e8"
            ]
        ]
    },
    {
        "id": "283937ac80e85ffc",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4315f20a9ab950ba",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 159",
        "func": "var floor=\"floor0\"\nvar room=\"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "283937ac80e85ffc"
            ]
        ]
    },
    {
        "id": "cd2457193921f969",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 540,
        "wires": [
            [
                "ff5541dcb4e18b50"
            ]
        ]
    },
    {
        "id": "f7d71cc975e796d9",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 540,
        "wires": [
            [
                "cd2457193921f969"
            ]
        ]
    },
    {
        "id": "ff5541dcb4e18b50",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 160",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 540,
        "wires": [
            [
                "4b503054e9e58dd9"
            ]
        ]
    },
    {
        "id": "ba8e1ea890096add",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 600,
        "wires": [
            [
                "ddacfdb28cd4993e"
            ]
        ]
    },
    {
        "id": "ddacfdb28cd4993e",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 600,
        "wires": [
            [
                "90c5fb7a739f2ef1",
                "6c80e2e99bcc1cd2"
            ]
        ]
    },
    {
        "id": "90c5fb7a739f2ef1",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 161",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 580,
        "wires": [
            [
                "b47bf70d181f9b9b"
            ]
        ]
    },
    {
        "id": "911f1d33c30e87de",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 480,
        "wires": [
            [
                "bef8b901eb06d69e"
            ]
        ]
    },
    {
        "id": "ba41e08d724d6b8e",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 680,
        "wires": [
            [
                "8387f0febd66a647"
            ]
        ]
    },
    {
        "id": "8387f0febd66a647",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "81f8507b9a48350e",
                "eabfe7f19dcb628a"
            ]
        ]
    },
    {
        "id": "81f8507b9a48350e",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 162",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 660,
        "wires": [
            [
                "3de53d50a4489736"
            ]
        ]
    },
    {
        "id": "3de53d50a4489736",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "4b503054e9e58dd9",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "b47bf70d181f9b9b",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "c21313e3f26523e8",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 163",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 500,
        "wires": [
            [
                "2f36f7ce6c992511"
            ]
        ]
    },
    {
        "id": "2f36f7ce6c992511",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "ccafe30d692f0847",
        "name": "humidity sensor data",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 500,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "eabfe7f19dcb628a",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 164",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "51ef08c4cb633089"
            ]
        ]
    },
    {
        "id": "51ef08c4cb633089",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "ccafe30d692f0847",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 700,
        "wires": []
    },
    {
        "id": "eddac821ca3503f0",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "ccafe30d692f0847",
        "name": "pressure Sensor Data ",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 620,
        "wires": []
    },
    {
        "id": "6c80e2e99bcc1cd2",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 165",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "eddac821ca3503f0"
            ]
        ]
    },
    {
        "id": "90f65c69af1ec003",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 860,
        "wires": [
            [
                "d5e37c9006022244",
                "9f5f9019ef343f5f"
            ]
        ]
    },
    {
        "id": "b645ea436e227bdf",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "9b32a6897ba63cc9",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "d5e37c9006022244",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 166",
        "func": "var floor=\"floor0\"\nvar room=\"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 840,
        "wires": [
            [
                "b645ea436e227bdf"
            ]
        ]
    },
    {
        "id": "2d559da9eb7af59f",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 920,
        "wires": [
            [
                "0d216904c4c3b042"
            ]
        ]
    },
    {
        "id": "514aed1e58fbae64",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 920,
        "wires": [
            [
                "2d559da9eb7af59f"
            ]
        ]
    },
    {
        "id": "0d216904c4c3b042",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 167",
        "func": "var floor = \"floor0\"\nvar room = \"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 920,
        "wires": [
            [
                "5a2130425498b1f8"
            ]
        ]
    },
    {
        "id": "4fdf9b1f56a8a1e7",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 980,
        "wires": [
            [
                "6eeaef89f40210d3"
            ]
        ]
    },
    {
        "id": "6eeaef89f40210d3",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 980,
        "wires": [
            [
                "ddafb3823c3b60e4",
                "c2b707c852a82a73"
            ]
        ]
    },
    {
        "id": "ddafb3823c3b60e4",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 168",
        "func": "var floor = \"floor0\"\nvar room = \"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 960,
        "wires": [
            [
                "8f5f4c25ee8d21eb"
            ]
        ]
    },
    {
        "id": "013ba212d5354d28",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 860,
        "wires": [
            [
                "90f65c69af1ec003"
            ]
        ]
    },
    {
        "id": "da2d6e9bfcb848c0",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1060,
        "wires": [
            [
                "e3ecaebf65f240d6"
            ]
        ]
    },
    {
        "id": "e3ecaebf65f240d6",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 1060,
        "wires": [
            [
                "0cf2feb1f322c74e",
                "0c0b809e7a486a96"
            ]
        ]
    },
    {
        "id": "0cf2feb1f322c74e",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 169",
        "func": "var floor = \"floor0\"\nvar room = \"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1040,
        "wires": [
            [
                "81b340063a4012e8"
            ]
        ]
    },
    {
        "id": "81b340063a4012e8",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "9b32a6897ba63cc9",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "5a2130425498b1f8",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "9b32a6897ba63cc9",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "8f5f4c25ee8d21eb",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "9b32a6897ba63cc9",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "9f5f9019ef343f5f",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 170",
        "func": "var floor = \"floor0\"\nvar room = \"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 880,
        "wires": [
            [
                "25a37d9ce1812f21"
            ]
        ]
    },
    {
        "id": "25a37d9ce1812f21",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "9b32a6897ba63cc9",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 880,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "0c0b809e7a486a96",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 171",
        "func": "var floor = \"floor0\"\nvar room = \"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1080,
        "wires": [
            [
                "d9866acc17c42e0a"
            ]
        ]
    },
    {
        "id": "d9866acc17c42e0a",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "9b32a6897ba63cc9",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1cefab329f260bf1",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "9b32a6897ba63cc9",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c2b707c852a82a73",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 172",
        "func": "var floor = \"floor0\"\nvar room = \"room2\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "1cefab329f260bf1"
            ]
        ]
    },
    {
        "id": "ec391117eab3c144",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 03",
        "info": "",
        "x": 80,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ba8af5a88fc76e4a",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 1200,
        "wires": [
            [
                "efe7a9aec370a8f6",
                "56b80b73d8be0d03"
            ]
        ]
    },
    {
        "id": "2468aded28d18e89",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "86eb1b9c09ab96ce",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "efe7a9aec370a8f6",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 173",
        "func": "var floor=\"floor0\"\nvar room=\"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1180,
        "wires": [
            [
                "2468aded28d18e89"
            ]
        ]
    },
    {
        "id": "73fbb3a2b15e2915",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 1260,
        "wires": [
            [
                "a57daff942d42f90"
            ]
        ]
    },
    {
        "id": "32528791e79afd2d",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1260,
        "wires": [
            [
                "73fbb3a2b15e2915"
            ]
        ]
    },
    {
        "id": "a57daff942d42f90",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 174",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "0432b79603e6640d"
            ]
        ]
    },
    {
        "id": "8f82237b86826609",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1320,
        "wires": [
            [
                "9f09e6c608225535"
            ]
        ]
    },
    {
        "id": "9f09e6c608225535",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "6567e78171692e90",
                "f68a44198fb0ebb4"
            ]
        ]
    },
    {
        "id": "6567e78171692e90",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 175",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "49667a20de8331ce"
            ]
        ]
    },
    {
        "id": "eee5e2af88ced0e7",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1200,
        "wires": [
            [
                "ba8af5a88fc76e4a"
            ]
        ]
    },
    {
        "id": "c6b25736cc996e66",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1400,
        "wires": [
            [
                "b166671533f4cc4c"
            ]
        ]
    },
    {
        "id": "b166671533f4cc4c",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "1b505625660f8009",
                "8034eda6bd90fa96"
            ]
        ]
    },
    {
        "id": "1b505625660f8009",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 176",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1380,
        "wires": [
            [
                "058d4dd28a5eaecf"
            ]
        ]
    },
    {
        "id": "058d4dd28a5eaecf",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "86eb1b9c09ab96ce",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "0432b79603e6640d",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "86eb1b9c09ab96ce",
        "order": 11,
        "width": 6,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "49667a20de8331ce",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "86eb1b9c09ab96ce",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "56b80b73d8be0d03",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 177",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "6a9db0cfc2180715"
            ]
        ]
    },
    {
        "id": "6a9db0cfc2180715",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "86eb1b9c09ab96ce",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1220,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "8034eda6bd90fa96",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 178",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1420,
        "wires": [
            [
                "ec4626db0929049e"
            ]
        ]
    },
    {
        "id": "ec4626db0929049e",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "86eb1b9c09ab96ce",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5c6157e8b59af30c",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "86eb1b9c09ab96ce",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f68a44198fb0ebb4",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 179",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1340,
        "wires": [
            [
                "5c6157e8b59af30c"
            ]
        ]
    },
    {
        "id": "7d4169ef4c5c01ec",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1480,
        "wires": [
            [
                "e2cb0c8f9f65d4da"
            ]
        ]
    },
    {
        "id": "e2cb0c8f9f65d4da",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 1480,
        "wires": [
            [
                "38814918fa0fb6d9",
                "08c5cb53c8f12bbf"
            ]
        ]
    },
    {
        "id": "38814918fa0fb6d9",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 180",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1460,
        "wires": [
            [
                "26b0e5fb96f7744d"
            ]
        ]
    },
    {
        "id": "26b0e5fb96f7744d",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "86eb1b9c09ab96ce",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "08c5cb53c8f12bbf",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 181",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1500,
        "wires": [
            [
                "0ba4a9d752bd3b24"
            ]
        ]
    },
    {
        "id": "0ba4a9d752bd3b24",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "86eb1b9c09ab96ce",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1500,
        "wires": []
    },
    {
        "id": "22f0fbafd150c54b",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "86eb1b9c09ab96ce",
        "order": 10,
        "width": 6,
        "height": 5,
        "label": "Sprinkler History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "615f8ea78c842db2",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 182",
        "func": "var floor = \"floor0\"\nvar room = \"room3\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1540,
        "wires": [
            [
                "22f0fbafd150c54b"
            ]
        ]
    },
    {
        "id": "dc5b32fa2e41f796",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_sprinkler",
        "operation": "find",
        "x": 320,
        "y": 1540,
        "wires": [
            [
                "615f8ea78c842db2"
            ]
        ]
    },
    {
        "id": "149e28aa9454a28c",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1540,
        "wires": [
            [
                "dc5b32fa2e41f796"
            ]
        ]
    },
    {
        "id": "9cb8fe20d95d509f",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 04",
        "info": "",
        "x": 80,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0508663e3562dc72",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 1680,
        "wires": [
            [
                "069803ef88bb9305",
                "161c572b024ea8ff"
            ]
        ]
    },
    {
        "id": "43fb16cdf19503a6",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2ddc4d9d74fc125c",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "069803ef88bb9305",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 183",
        "func": "var floor=\"floor0\"\nvar room=\"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1660,
        "wires": [
            [
                "43fb16cdf19503a6"
            ]
        ]
    },
    {
        "id": "fb699684c556d2a3",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_pull_station",
        "operation": "find",
        "x": 330,
        "y": 1740,
        "wires": [
            [
                "428dad497dc08156"
            ]
        ]
    },
    {
        "id": "22ea74bf881706e6",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1740,
        "wires": [
            [
                "fb699684c556d2a3"
            ]
        ]
    },
    {
        "id": "428dad497dc08156",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 184",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1740,
        "wires": [
            [
                "1f3f2aa281417ac3"
            ]
        ]
    },
    {
        "id": "ed9af082c48958a4",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1800,
        "wires": [
            [
                "16c04689c06c56dd"
            ]
        ]
    },
    {
        "id": "16c04689c06c56dd",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 1800,
        "wires": [
            [
                "540664c5188f6761",
                "5830e1a4ffeb9caa"
            ]
        ]
    },
    {
        "id": "540664c5188f6761",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 185",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1780,
        "wires": [
            [
                "34b0714bec58f31c"
            ]
        ]
    },
    {
        "id": "a50b9c28a13a10f6",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1680,
        "wires": [
            [
                "0508663e3562dc72"
            ]
        ]
    },
    {
        "id": "2c781b741004076a",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1880,
        "wires": [
            [
                "15a9866ae8a7f0da"
            ]
        ]
    },
    {
        "id": "15a9866ae8a7f0da",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 1880,
        "wires": [
            [
                "a2ebff53e745bf75",
                "84a1d8367afd9d99"
            ]
        ]
    },
    {
        "id": "a2ebff53e745bf75",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 186",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1860,
        "wires": [
            [
                "fcc0a6141ef4f1f4"
            ]
        ]
    },
    {
        "id": "fcc0a6141ef4f1f4",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2ddc4d9d74fc125c",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "1f3f2aa281417ac3",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2ddc4d9d74fc125c",
        "order": 9,
        "width": 6,
        "height": 5,
        "label": "Pull station History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "34b0714bec58f31c",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2ddc4d9d74fc125c",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "161c572b024ea8ff",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 187",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1700,
        "wires": [
            [
                "7db49fd50bb0f81f"
            ]
        ]
    },
    {
        "id": "7db49fd50bb0f81f",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2ddc4d9d74fc125c",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1700,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "84a1d8367afd9d99",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 188",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1900,
        "wires": [
            [
                "d66b7ee31724235c"
            ]
        ]
    },
    {
        "id": "d66b7ee31724235c",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2ddc4d9d74fc125c",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 1900,
        "wires": []
    },
    {
        "id": "f051476c9bcda162",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2ddc4d9d74fc125c",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1820,
        "wires": []
    },
    {
        "id": "5830e1a4ffeb9caa",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 189",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1820,
        "wires": [
            [
                "f051476c9bcda162"
            ]
        ]
    },
    {
        "id": "74795c8ee606eb01",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1960,
        "wires": [
            [
                "808c416554b227e1"
            ]
        ]
    },
    {
        "id": "808c416554b227e1",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 1960,
        "wires": [
            [
                "806e921932a1fade",
                "bcecce4f19628727"
            ]
        ]
    },
    {
        "id": "806e921932a1fade",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 190",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1940,
        "wires": [
            [
                "a3a1e37405f31122"
            ]
        ]
    },
    {
        "id": "a3a1e37405f31122",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2ddc4d9d74fc125c",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "bcecce4f19628727",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 191",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1980,
        "wires": [
            [
                "4386db72453aa325"
            ]
        ]
    },
    {
        "id": "4386db72453aa325",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2ddc4d9d74fc125c",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 1980,
        "wires": []
    },
    {
        "id": "439210b0bb4bef95",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2ddc4d9d74fc125c",
        "order": 10,
        "width": 6,
        "height": 5,
        "label": "Sprinkler History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "d7b80601540fb88b",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 192",
        "func": "var floor = \"floor0\"\nvar room = \"room4\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2020,
        "wires": [
            [
                "439210b0bb4bef95"
            ]
        ]
    },
    {
        "id": "a33ce1c6893acb28",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_sprinkler",
        "operation": "find",
        "x": 320,
        "y": 2020,
        "wires": [
            [
                "d7b80601540fb88b"
            ]
        ]
    },
    {
        "id": "5d5af13ca7b9feae",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2020,
        "wires": [
            [
                "a33ce1c6893acb28"
            ]
        ]
    },
    {
        "id": "92741d8d7651b2e5",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 05",
        "info": "",
        "x": 80,
        "y": 2100,
        "wires": []
    },
    {
        "id": "62687c776874afd2",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 2160,
        "wires": [
            [
                "97af22cc2689acc5",
                "d8efc4b9738673c5"
            ]
        ]
    },
    {
        "id": "abda0c7e3e5e8f8e",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "46156fa3b00c5120",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "97af22cc2689acc5",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 193",
        "func": "var floor=\"floor0\"\nvar room=\"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2140,
        "wires": [
            [
                "abda0c7e3e5e8f8e"
            ]
        ]
    },
    {
        "id": "7fe2db71c9dc0128",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_pull_station",
        "operation": "find",
        "x": 330,
        "y": 2220,
        "wires": [
            [
                "83a52e7be33d20ae"
            ]
        ]
    },
    {
        "id": "8a580650501612f3",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2220,
        "wires": [
            [
                "7fe2db71c9dc0128"
            ]
        ]
    },
    {
        "id": "83a52e7be33d20ae",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 194",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2220,
        "wires": [
            [
                "a5a02123a023c145"
            ]
        ]
    },
    {
        "id": "240675d75ec6e2c5",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2280,
        "wires": [
            [
                "4f9f154f4222b1cc"
            ]
        ]
    },
    {
        "id": "4f9f154f4222b1cc",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 2280,
        "wires": [
            [
                "0a08081ea273a1fe",
                "1f98237aec78da2b"
            ]
        ]
    },
    {
        "id": "0a08081ea273a1fe",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 195",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2260,
        "wires": [
            [
                "2587132bf7150db2"
            ]
        ]
    },
    {
        "id": "f806f39bba06bdc8",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2160,
        "wires": [
            [
                "62687c776874afd2"
            ]
        ]
    },
    {
        "id": "d77e1fbb65a91081",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2360,
        "wires": [
            [
                "72cb7179da02413e"
            ]
        ]
    },
    {
        "id": "72cb7179da02413e",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 2360,
        "wires": [
            [
                "47f2fbc435b1c83f",
                "d5439df1468965a0"
            ]
        ]
    },
    {
        "id": "47f2fbc435b1c83f",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 196",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2340,
        "wires": [
            [
                "88645144afdde7c7"
            ]
        ]
    },
    {
        "id": "88645144afdde7c7",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "46156fa3b00c5120",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "a5a02123a023c145",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "46156fa3b00c5120",
        "order": 9,
        "width": 6,
        "height": 5,
        "label": "Pull station History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "2587132bf7150db2",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "46156fa3b00c5120",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "d8efc4b9738673c5",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 197",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2180,
        "wires": [
            [
                "fcadeaaefecb3e77"
            ]
        ]
    },
    {
        "id": "fcadeaaefecb3e77",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "46156fa3b00c5120",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2180,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "d5439df1468965a0",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 198",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2380,
        "wires": [
            [
                "eba30485172b9505"
            ]
        ]
    },
    {
        "id": "eba30485172b9505",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "46156fa3b00c5120",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 2380,
        "wires": []
    },
    {
        "id": "cf30f4fba074ebca",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "46156fa3b00c5120",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2300,
        "wires": []
    },
    {
        "id": "1f98237aec78da2b",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 199",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2300,
        "wires": [
            [
                "cf30f4fba074ebca"
            ]
        ]
    },
    {
        "id": "430e2ee6a9ac0678",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2440,
        "wires": [
            [
                "508bc3c6ddf07cdb"
            ]
        ]
    },
    {
        "id": "508bc3c6ddf07cdb",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 2440,
        "wires": [
            [
                "1f8cf6df1320c62a",
                "f92a60daa1f84a9b"
            ]
        ]
    },
    {
        "id": "1f8cf6df1320c62a",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 200",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2420,
        "wires": [
            [
                "7e51d154a7156841"
            ]
        ]
    },
    {
        "id": "7e51d154a7156841",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "46156fa3b00c5120",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "f92a60daa1f84a9b",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 201",
        "func": "var floor = \"floor0\"\nvar room = \"room5\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2460,
        "wires": [
            [
                "cd778cceb174e77f"
            ]
        ]
    },
    {
        "id": "cd778cceb174e77f",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "46156fa3b00c5120",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2460,
        "wires": []
    },
    {
        "id": "46dae2097ead4130",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 06",
        "info": "",
        "x": 80,
        "y": 2520,
        "wires": []
    },
    {
        "id": "edf9b318fb4ffe62",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 2580,
        "wires": [
            [
                "0f2d81f97a227123",
                "a905ef0cbf92fd35"
            ]
        ]
    },
    {
        "id": "ee531cda4c223021",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "766703600340ab60",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "0f2d81f97a227123",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 202",
        "func": "var floor=\"floor0\"\nvar room=\"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2560,
        "wires": [
            [
                "ee531cda4c223021"
            ]
        ]
    },
    {
        "id": "5ef77e88d59815c6",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_pull_station",
        "operation": "find",
        "x": 330,
        "y": 2640,
        "wires": [
            [
                "a5b0de4834473e6d"
            ]
        ]
    },
    {
        "id": "3ab4af3836061d36",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2640,
        "wires": [
            [
                "5ef77e88d59815c6"
            ]
        ]
    },
    {
        "id": "a5b0de4834473e6d",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 203",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2640,
        "wires": [
            [
                "6f90cf49a46c20b9"
            ]
        ]
    },
    {
        "id": "6068091a1c2e5cef",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2700,
        "wires": [
            [
                "43100e9ca3ccc2fe"
            ]
        ]
    },
    {
        "id": "43100e9ca3ccc2fe",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 2700,
        "wires": [
            [
                "e8ab5ae860a5d4fb",
                "d9b4bcef41c6d5f8"
            ]
        ]
    },
    {
        "id": "e8ab5ae860a5d4fb",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 204",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2680,
        "wires": [
            [
                "d5da0ee46e97bc27"
            ]
        ]
    },
    {
        "id": "9de8ba73029e03d9",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2580,
        "wires": [
            [
                "edf9b318fb4ffe62"
            ]
        ]
    },
    {
        "id": "daa807739aa29b72",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2780,
        "wires": [
            [
                "a7f462373a9395ae"
            ]
        ]
    },
    {
        "id": "a7f462373a9395ae",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 2780,
        "wires": [
            [
                "6a0dea0c49a42bbf",
                "50e0f47662728ae2"
            ]
        ]
    },
    {
        "id": "6a0dea0c49a42bbf",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 205",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2760,
        "wires": [
            [
                "0ce3b7713715434d"
            ]
        ]
    },
    {
        "id": "0ce3b7713715434d",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "766703600340ab60",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "6f90cf49a46c20b9",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "766703600340ab60",
        "order": 9,
        "width": 6,
        "height": 5,
        "label": "Pull station History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "d5da0ee46e97bc27",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "766703600340ab60",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "a905ef0cbf92fd35",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 206",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2600,
        "wires": [
            [
                "1c1e1fd98c98f16c"
            ]
        ]
    },
    {
        "id": "1c1e1fd98c98f16c",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "766703600340ab60",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2600,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "50e0f47662728ae2",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 207",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2800,
        "wires": [
            [
                "74ce9bae1872f95e"
            ]
        ]
    },
    {
        "id": "74ce9bae1872f95e",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "766703600340ab60",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 2800,
        "wires": []
    },
    {
        "id": "1b7835e2cc018ba1",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "766703600340ab60",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2720,
        "wires": []
    },
    {
        "id": "d9b4bcef41c6d5f8",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 208",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2720,
        "wires": [
            [
                "1b7835e2cc018ba1"
            ]
        ]
    },
    {
        "id": "de5064d3f8ddc2cc",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 2860,
        "wires": [
            [
                "72bb29f7bb626f82"
            ]
        ]
    },
    {
        "id": "72bb29f7bb626f82",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 2860,
        "wires": [
            [
                "33c7e80611b4fa25",
                "1d8f7825e3918951"
            ]
        ]
    },
    {
        "id": "33c7e80611b4fa25",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 209",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2840,
        "wires": [
            [
                "ed12a128691741d2"
            ]
        ]
    },
    {
        "id": "ed12a128691741d2",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "766703600340ab60",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "1d8f7825e3918951",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 210",
        "func": "var floor = \"floor0\"\nvar room = \"room6\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2880,
        "wires": [
            [
                "0e069104b94be592"
            ]
        ]
    },
    {
        "id": "0e069104b94be592",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "766703600340ab60",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 2880,
        "wires": []
    },
    {
        "id": "aaca2d0fc8c30d36",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 07",
        "info": "",
        "x": 80,
        "y": 2980,
        "wires": []
    },
    {
        "id": "9898031195a4bc6c",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 3040,
        "wires": [
            [
                "86f06a94a743ba0f",
                "2bb1e97b2cbfc99d"
            ]
        ]
    },
    {
        "id": "f2b28fb0141e5f3b",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "c095ad71855bf6fd",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 3020,
        "wires": [
            []
        ]
    },
    {
        "id": "86f06a94a743ba0f",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 212",
        "func": "var floor=\"floor0\"\nvar room=\"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3020,
        "wires": [
            [
                "f2b28fb0141e5f3b"
            ]
        ]
    },
    {
        "id": "c4d5d93837de1fba",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_pull_station",
        "operation": "find",
        "x": 330,
        "y": 3100,
        "wires": [
            [
                "3886cebf0387c8d5"
            ]
        ]
    },
    {
        "id": "4a953856364f9cb0",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3100,
        "wires": [
            [
                "c4d5d93837de1fba"
            ]
        ]
    },
    {
        "id": "3886cebf0387c8d5",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 213",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3100,
        "wires": [
            [
                "1ac00c60b3b31860"
            ]
        ]
    },
    {
        "id": "013b8332b982ebe4",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3160,
        "wires": [
            [
                "ce71dac6e8ce9c1b"
            ]
        ]
    },
    {
        "id": "ce71dac6e8ce9c1b",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 3160,
        "wires": [
            [
                "a11c8dabcca2fd37",
                "0e114c0f42ebd0af"
            ]
        ]
    },
    {
        "id": "a11c8dabcca2fd37",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 214",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3140,
        "wires": [
            [
                "d4e59a482a1d0752"
            ]
        ]
    },
    {
        "id": "910ffbf7bde37c45",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3040,
        "wires": [
            [
                "9898031195a4bc6c"
            ]
        ]
    },
    {
        "id": "64390f42423c1b27",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3240,
        "wires": [
            [
                "f11eaa36830886d2"
            ]
        ]
    },
    {
        "id": "f11eaa36830886d2",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 3240,
        "wires": [
            [
                "5f0e3fde862315dc",
                "e49231ddbd3f3fdc"
            ]
        ]
    },
    {
        "id": "5f0e3fde862315dc",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 215",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3220,
        "wires": [
            [
                "3cc3b6ee6b497799"
            ]
        ]
    },
    {
        "id": "3cc3b6ee6b497799",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "c095ad71855bf6fd",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac00c60b3b31860",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "c095ad71855bf6fd",
        "order": 9,
        "width": 6,
        "height": 5,
        "label": "Pull station History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "d4e59a482a1d0752",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "c095ad71855bf6fd",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "2bb1e97b2cbfc99d",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 216",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3060,
        "wires": [
            [
                "683fab38bab90f99"
            ]
        ]
    },
    {
        "id": "683fab38bab90f99",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "c095ad71855bf6fd",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 3060,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "e49231ddbd3f3fdc",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 217",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3260,
        "wires": [
            [
                "6a7238bddf2cbb50"
            ]
        ]
    },
    {
        "id": "6a7238bddf2cbb50",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "c095ad71855bf6fd",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 3260,
        "wires": []
    },
    {
        "id": "9f62a489305428eb",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "c095ad71855bf6fd",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 3180,
        "wires": []
    },
    {
        "id": "0e114c0f42ebd0af",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 218",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3180,
        "wires": [
            [
                "9f62a489305428eb"
            ]
        ]
    },
    {
        "id": "aba0ac9387e9de2d",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3320,
        "wires": [
            [
                "477b52f7fb38d1c2"
            ]
        ]
    },
    {
        "id": "477b52f7fb38d1c2",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 3320,
        "wires": [
            [
                "4eb3e180e17de199",
                "8b568adedb7e09b6"
            ]
        ]
    },
    {
        "id": "4eb3e180e17de199",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 219",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3300,
        "wires": [
            [
                "52c643f083e40d1c"
            ]
        ]
    },
    {
        "id": "52c643f083e40d1c",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "c095ad71855bf6fd",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "8b568adedb7e09b6",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 220",
        "func": "var floor = \"floor0\"\nvar room = \"room7\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3340,
        "wires": [
            [
                "18c30722519f78f4"
            ]
        ]
    },
    {
        "id": "18c30722519f78f4",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "c095ad71855bf6fd",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 3340,
        "wires": []
    },
    {
        "id": "02166cd2537da0b6",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 08",
        "info": "",
        "x": 80,
        "y": 3400,
        "wires": []
    },
    {
        "id": "fcf15de594a3c8f7",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 3460,
        "wires": [
            [
                "f9634026bb6b7c5f",
                "0b1389226563b957"
            ]
        ]
    },
    {
        "id": "81dae996bfce3c45",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "f9634026bb6b7c5f",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 221",
        "func": "var floor=\"floor0\"\nvar room=\"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3440,
        "wires": [
            [
                "81dae996bfce3c45"
            ]
        ]
    },
    {
        "id": "114a2d4afdad3d72",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_pull_station",
        "operation": "find",
        "x": 330,
        "y": 3520,
        "wires": [
            [
                "b63675190d69e790"
            ]
        ]
    },
    {
        "id": "2ec1ae67f524a0c6",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3520,
        "wires": [
            [
                "114a2d4afdad3d72"
            ]
        ]
    },
    {
        "id": "b63675190d69e790",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 222",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3520,
        "wires": [
            [
                "c2d3c70ab6fb63fa"
            ]
        ]
    },
    {
        "id": "8f7f8cb9228df1cb",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3580,
        "wires": [
            [
                "f3691f0d9371849e"
            ]
        ]
    },
    {
        "id": "f3691f0d9371849e",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 3580,
        "wires": [
            [
                "5f7041eaf7fe1f07",
                "8e67fdbdf8a00ca9"
            ]
        ]
    },
    {
        "id": "5f7041eaf7fe1f07",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 223",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3560,
        "wires": [
            [
                "48a0747a865bd1a3"
            ]
        ]
    },
    {
        "id": "c69f991c743f8f92",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3460,
        "wires": [
            [
                "fcf15de594a3c8f7"
            ]
        ]
    },
    {
        "id": "09dc05cc62718314",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3660,
        "wires": [
            [
                "6f427fb7318c2da1"
            ]
        ]
    },
    {
        "id": "6f427fb7318c2da1",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 3660,
        "wires": [
            [
                "07424bef722c06ab",
                "524d22f1f24a796c"
            ]
        ]
    },
    {
        "id": "07424bef722c06ab",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 224",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3640,
        "wires": [
            [
                "0bb88ade4b7f43b7"
            ]
        ]
    },
    {
        "id": "0bb88ade4b7f43b7",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3640,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d3c70ab6fb63fa",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 9,
        "width": 6,
        "height": 5,
        "label": "Pull station History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "48a0747a865bd1a3",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "0b1389226563b957",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 225",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3480,
        "wires": [
            [
                "077fd98d6afead7d"
            ]
        ]
    },
    {
        "id": "077fd98d6afead7d",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "6b5beacec66f9321",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 3480,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "524d22f1f24a796c",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 226",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3680,
        "wires": [
            [
                "bba8151fa992416e"
            ]
        ]
    },
    {
        "id": "bba8151fa992416e",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "6b5beacec66f9321",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 3680,
        "wires": []
    },
    {
        "id": "b28cadc35775ece6",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "6b5beacec66f9321",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 3600,
        "wires": []
    },
    {
        "id": "8e67fdbdf8a00ca9",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 227",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3600,
        "wires": [
            [
                "b28cadc35775ece6"
            ]
        ]
    },
    {
        "id": "b54f3bf827576105",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3740,
        "wires": [
            [
                "1972cd2c9b9a0192"
            ]
        ]
    },
    {
        "id": "1972cd2c9b9a0192",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 3740,
        "wires": [
            [
                "5dbe392ee1366719",
                "90c82d760924e3bd"
            ]
        ]
    },
    {
        "id": "5dbe392ee1366719",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 228",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3720,
        "wires": [
            [
                "f4761c22981c4952"
            ]
        ]
    },
    {
        "id": "f4761c22981c4952",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3720,
        "wires": [
            []
        ]
    },
    {
        "id": "90c82d760924e3bd",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 229",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3760,
        "wires": [
            [
                "53022f6614232d2d"
            ]
        ]
    },
    {
        "id": "53022f6614232d2d",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "6b5beacec66f9321",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 3760,
        "wires": []
    },
    {
        "id": "9d951ccae7bc8de2",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 11,
        "width": 6,
        "height": 5,
        "label": "Sprinkler History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 3800,
        "wires": [
            []
        ]
    },
    {
        "id": "c620f2a3a34e0b51",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 230",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3800,
        "wires": [
            [
                "9d951ccae7bc8de2"
            ]
        ]
    },
    {
        "id": "f54934db96430c32",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_sprinkler",
        "operation": "find",
        "x": 320,
        "y": 3800,
        "wires": [
            [
                "c620f2a3a34e0b51"
            ]
        ]
    },
    {
        "id": "77add868ac124107",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3800,
        "wires": [
            [
                "f54934db96430c32"
            ]
        ]
    },
    {
        "id": "71dd0a6e4704c587",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3840,
        "wires": [
            [
                "7dd7f7be73838986"
            ]
        ]
    },
    {
        "id": "7dd7f7be73838986",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 3840,
        "wires": [
            [
                "5b91ba14ec7bedbf"
            ]
        ]
    },
    {
        "id": "5b91ba14ec7bedbf",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 232",
        "func": "var floor = \"floor0\"\nvar room = \"room8\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3840,
        "wires": [
            [
                "0ec8bbdd56de1cb5"
            ]
        ]
    },
    {
        "id": "0ec8bbdd56de1cb5",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "6b5beacec66f9321",
        "order": 10,
        "width": 6,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 3840,
        "wires": [
            []
        ]
    },
    {
        "id": "b9c278790d809f10",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 09",
        "info": "",
        "x": 80,
        "y": 3920,
        "wires": []
    },
    {
        "id": "cd78db406d226ad8",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_humid",
        "operation": "find",
        "x": 360,
        "y": 3980,
        "wires": [
            [
                "d0d25c5102edb6e0",
                "302caa13fb6bbd12"
            ]
        ]
    },
    {
        "id": "561401d70ded13d5",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 2,
        "width": 6,
        "height": 5,
        "label": "humidity sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "d0d25c5102edb6e0",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 233",
        "func": "var floor=\"floor0\"\nvar room=\"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3960,
        "wires": [
            [
                "561401d70ded13d5"
            ]
        ]
    },
    {
        "id": "ed2a8229cd52f348",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_pull_station",
        "operation": "find",
        "x": 330,
        "y": 4040,
        "wires": [
            [
                "413b28dabf73a684"
            ]
        ]
    },
    {
        "id": "e3c35a93206f4d59",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 4040,
        "wires": [
            [
                "ed2a8229cd52f348"
            ]
        ]
    },
    {
        "id": "413b28dabf73a684",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 234",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4040,
        "wires": [
            [
                "b668981d75cbfc8b"
            ]
        ]
    },
    {
        "id": "a2c927c372eb95a3",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 4100,
        "wires": [
            [
                "61950b6ac5ab8612"
            ]
        ]
    },
    {
        "id": "61950b6ac5ab8612",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_pres",
        "operation": "find",
        "x": 350,
        "y": 4100,
        "wires": [
            [
                "4ffb236f39c8efc5",
                "701c02f35b0a05fd"
            ]
        ]
    },
    {
        "id": "4ffb236f39c8efc5",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 235",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4080,
        "wires": [
            [
                "769db8c00adcc8ee"
            ]
        ]
    },
    {
        "id": "d0d0de6efbfdb6e4",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 3980,
        "wires": [
            [
                "cd78db406d226ad8"
            ]
        ]
    },
    {
        "id": "bf507f5bb4e04d83",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 4180,
        "wires": [
            [
                "eca8347c20829bca"
            ]
        ]
    },
    {
        "id": "eca8347c20829bca",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 4180,
        "wires": [
            [
                "6f17bddadb9d28cf",
                "5b8677611246f2ed"
            ]
        ]
    },
    {
        "id": "6f17bddadb9d28cf",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 236",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4160,
        "wires": [
            [
                "2f0d2e3ec4e03e69"
            ]
        ]
    },
    {
        "id": "2f0d2e3ec4e03e69",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Temp sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 4160,
        "wires": [
            []
        ]
    },
    {
        "id": "b668981d75cbfc8b",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 9,
        "width": 6,
        "height": 5,
        "label": "Pull station History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 4040,
        "wires": [
            []
        ]
    },
    {
        "id": "769db8c00adcc8ee",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Pressure sensor Data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 4080,
        "wires": [
            []
        ]
    },
    {
        "id": "302caa13fb6bbd12",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 237",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time).toLocaleString({ dateStyle: 'short'}), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4000,
        "wires": [
            [
                "6dffbdbe7cbd911f"
            ]
        ]
    },
    {
        "id": "6dffbdbe7cbd911f",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "dcd4019ba1322187",
        "name": "humidity sensor data",
        "order": 6,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 4000,
        "wires": [],
        "info": "<h1>Smoke sensor data</h1>"
    },
    {
        "id": "5b8677611246f2ed",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 238",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4200,
        "wires": [
            [
                "1abda6bc16be2de3"
            ]
        ]
    },
    {
        "id": "1abda6bc16be2de3",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "dcd4019ba1322187",
        "name": "Temp Sensor Data ",
        "order": 5,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 810,
        "y": 4200,
        "wires": []
    },
    {
        "id": "c9be64fd89469b34",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "dcd4019ba1322187",
        "name": "pressure Sensor Data ",
        "order": 7,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 4120,
        "wires": []
    },
    {
        "id": "701c02f35b0a05fd",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 239",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4120,
        "wires": [
            [
                "c9be64fd89469b34"
            ]
        ]
    },
    {
        "id": "9772e34b7070a49f",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 4260,
        "wires": [
            [
                "46bd7c289a4718d8"
            ]
        ]
    },
    {
        "id": "46bd7c289a4718d8",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 4260,
        "wires": [
            [
                "a7ab3a39d567133c",
                "ca2c6d1248cd3f0b"
            ]
        ]
    },
    {
        "id": "a7ab3a39d567133c",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 240",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4240,
        "wires": [
            [
                "5ce8d5ead740591d"
            ]
        ]
    },
    {
        "id": "5ce8d5ead740591d",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 4,
        "width": 6,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 4240,
        "wires": [
            []
        ]
    },
    {
        "id": "ca2c6d1248cd3f0b",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 241",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4280,
        "wires": [
            [
                "1727059aabf09916"
            ]
        ]
    },
    {
        "id": "1727059aabf09916",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "dcd4019ba1322187",
        "name": "Smoke Sensor Data ",
        "order": 8,
        "width": 6,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 820,
        "y": 4280,
        "wires": []
    },
    {
        "id": "75a2a569ec52b6e6",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 11,
        "width": 6,
        "height": 5,
        "label": "Sprinkler History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 4320,
        "wires": [
            []
        ]
    },
    {
        "id": "eb7eaaf7a3172fd0",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 242",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4320,
        "wires": [
            [
                "75a2a569ec52b6e6"
            ]
        ]
    },
    {
        "id": "2b152f203709bb8c",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_sprinkler",
        "operation": "find",
        "x": 320,
        "y": 4320,
        "wires": [
            [
                "eb7eaaf7a3172fd0"
            ]
        ]
    },
    {
        "id": "37204911ae048e42",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 4320,
        "wires": [
            [
                "2b152f203709bb8c"
            ]
        ]
    },
    {
        "id": "da0a8adeac3f6e36",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 4360,
        "wires": [
            [
                "9aaffde70d8ecb8a"
            ]
        ]
    },
    {
        "id": "9aaffde70d8ecb8a",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 4360,
        "wires": [
            [
                "44ca657dd7902497"
            ]
        ]
    },
    {
        "id": "44ca657dd7902497",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 243",
        "func": "var floor = \"floor0\"\nvar room = \"room9\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4360,
        "wires": [
            [
                "1caf516320b58214"
            ]
        ]
    },
    {
        "id": "1caf516320b58214",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "dcd4019ba1322187",
        "order": 10,
        "width": 6,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 4360,
        "wires": [
            []
        ]
    },
    {
        "id": "1af2a2048532cae3",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "11d9c559e18638de",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "51c0d531bec0801e",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 10,
        "width": 6,
        "height": 1
    },
    {
        "id": "7a1d2a06a0dc9cb4",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "ccafe30d692f0847",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "bee2799f86d460f0",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "ccafe30d692f0847",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "b77c2c122f38a1c1",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "ccafe30d692f0847",
        "order": 10,
        "width": 6,
        "height": 1
    },
    {
        "id": "5e96662f54881b6d",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "9b32a6897ba63cc9",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "4e8f92f3dbf572f6",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "9b32a6897ba63cc9",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "962085f9d8fc1a5a",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "9b32a6897ba63cc9",
        "order": 10,
        "width": 6,
        "height": 1
    },
    {
        "id": "23bc5ce3a4d7b1b4",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "dfae811737d5f8d5",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 12,
        "width": 11,
        "height": 1
    },
    {
        "id": "5197084b61d69717",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "03aca8bcefcaa393",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 14,
        "width": 11,
        "height": 1
    },
    {
        "id": "4d8eb236f7a2391d",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "0f33721bce3269cb",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 16,
        "width": 11,
        "height": 1
    },
    {
        "id": "bd8d19b1bd6a47a5",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "b6ccb58996ad7eb5",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 18,
        "width": 11,
        "height": 1
    },
    {
        "id": "6b0af5ce4bbe0464",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "bdee14b4c31dd1f9",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "86eb1b9c09ab96ce",
        "order": 20,
        "width": 11,
        "height": 1
    },
    {
        "id": "1302d9cefa26bf8f",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2ddc4d9d74fc125c",
        "order": 11,
        "width": 12,
        "height": 1
    },
    {
        "id": "f1c0c25d13589078",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2ddc4d9d74fc125c",
        "order": 12,
        "width": 12,
        "height": 1
    },
    {
        "id": "18f33bd38b19164b",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2ddc4d9d74fc125c",
        "order": 13,
        "width": 12,
        "height": 1
    },
    {
        "id": "d20ce1d0d6ef2378",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2ddc4d9d74fc125c",
        "order": 14,
        "width": 12,
        "height": 1
    },
    {
        "id": "7cc03ff274ccce69",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2ddc4d9d74fc125c",
        "order": 15,
        "width": 12,
        "height": 1
    },
    {
        "id": "c6b2143f59806a58",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "46156fa3b00c5120",
        "order": 10,
        "width": 18,
        "height": 1
    },
    {
        "id": "ca0a937cd088c287",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "46156fa3b00c5120",
        "order": 11,
        "width": 18,
        "height": 1
    },
    {
        "id": "2e0fb4c56a36d08f",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "46156fa3b00c5120",
        "order": 12,
        "width": 18,
        "height": 1
    },
    {
        "id": "e003dd3acf3aac02",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "46156fa3b00c5120",
        "order": 13,
        "width": 18,
        "height": 1
    },
    {
        "id": "f9343511c5196f0f",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "46156fa3b00c5120",
        "order": 14,
        "width": 18,
        "height": 1
    },
    {
        "id": "9e1dbe49feefcafd",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "766703600340ab60",
        "order": 10,
        "width": 18,
        "height": 1
    },
    {
        "id": "4fddeec6b8cc7c77",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "766703600340ab60",
        "order": 11,
        "width": 18,
        "height": 1
    },
    {
        "id": "b522c32fe7d868ba",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "766703600340ab60",
        "order": 12,
        "width": 18,
        "height": 1
    },
    {
        "id": "8d0eac5ba82220b3",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "766703600340ab60",
        "order": 13,
        "width": 18,
        "height": 1
    },
    {
        "id": "5c0edaab14492296",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "766703600340ab60",
        "order": 14,
        "width": 18,
        "height": 1
    },
    {
        "id": "7e9ca70d64139aa7",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "c095ad71855bf6fd",
        "order": 10,
        "width": 18,
        "height": 1
    },
    {
        "id": "31f64d58ec67287c",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "c095ad71855bf6fd",
        "order": 11,
        "width": 18,
        "height": 1
    },
    {
        "id": "480e7fd3549f9c09",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "c095ad71855bf6fd",
        "order": 12,
        "width": 18,
        "height": 1
    },
    {
        "id": "a342c16877914edf",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "c095ad71855bf6fd",
        "order": 13,
        "width": 18,
        "height": 1
    },
    {
        "id": "1903fdec4373d34c",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "c095ad71855bf6fd",
        "order": 14,
        "width": 18,
        "height": 1
    },
    {
        "id": "163b049df863577f",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "6b5beacec66f9321",
        "order": 12,
        "width": 6,
        "height": 1
    },
    {
        "id": "08e1f38bac917bc3",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "6b5beacec66f9321",
        "order": 13,
        "width": 6,
        "height": 1
    },
    {
        "id": "9b07061ee65e69d9",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "6b5beacec66f9321",
        "order": 14,
        "width": 6,
        "height": 1
    },
    {
        "id": "03f1cf06b922113b",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "6b5beacec66f9321",
        "order": 15,
        "width": 6,
        "height": 1
    },
    {
        "id": "65f93bb524c34114",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "6b5beacec66f9321",
        "order": 16,
        "width": 6,
        "height": 1
    },
    {
        "id": "e1ddbe4869694ea5",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "dcd4019ba1322187",
        "order": 12,
        "width": 6,
        "height": 1
    },
    {
        "id": "e3e4fc2557c57702",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "dcd4019ba1322187",
        "order": 13,
        "width": 6,
        "height": 1
    },
    {
        "id": "73eacb51480f14c5",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "dcd4019ba1322187",
        "order": 14,
        "width": 6,
        "height": 1
    },
    {
        "id": "893bab7859c7b82a",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "dcd4019ba1322187",
        "order": 15,
        "width": 6,
        "height": 1
    },
    {
        "id": "2efc995587672e78",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "dcd4019ba1322187",
        "order": 16,
        "width": 6,
        "height": 1
    },
    {
        "id": "de13983547e18743",
        "type": "mongodb",
        "hostname": "mongo_326",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "co326",
        "name": ""
    },
    {
        "id": "2701b1ecd02534d5",
        "type": "ui_group",
        "name": "Room 00",
        "tab": "00072b2f38cb6708",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ccafe30d692f0847",
        "type": "ui_group",
        "name": "Room 01",
        "tab": "00072b2f38cb6708",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": true,
        "className": ""
    },
    {
        "id": "9b32a6897ba63cc9",
        "type": "ui_group",
        "name": "Room 02",
        "tab": "00072b2f38cb6708",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "86eb1b9c09ab96ce",
        "type": "ui_group",
        "name": "Room 03",
        "tab": "00072b2f38cb6708",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2ddc4d9d74fc125c",
        "type": "ui_group",
        "name": "Room 04",
        "tab": "00072b2f38cb6708",
        "order": 5,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "46156fa3b00c5120",
        "type": "ui_group",
        "name": "Room 05",
        "tab": "00072b2f38cb6708",
        "order": 6,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "766703600340ab60",
        "type": "ui_group",
        "name": "Room 06",
        "tab": "00072b2f38cb6708",
        "order": 7,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c095ad71855bf6fd",
        "type": "ui_group",
        "name": "Room 07",
        "tab": "00072b2f38cb6708",
        "order": 8,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6b5beacec66f9321",
        "type": "ui_group",
        "name": "Room 08",
        "tab": "00072b2f38cb6708",
        "order": 9,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "dcd4019ba1322187",
        "type": "ui_group",
        "name": "Room 09",
        "tab": "00072b2f38cb6708",
        "order": 10,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "00072b2f38cb6708",
        "type": "ui_tab",
        "name": "Web Interface",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]